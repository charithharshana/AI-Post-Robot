let selectedText = "";
let categories = ["pets", "park", "old", "elephant"];

chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "updateSelectedText") {
    selectedText = request.text;
  } else if (request.action === "addCategory") {
    addCategory(request.category);
  }
});

chrome.runtime.onInstalled.addListener(() => {
  createContextMenu();
  chrome.storage.local.set({ savedItems: {}, categories: categories });
});

function createContextMenu() {
  chrome.contextMenus.create({
    id: "saveSocialImage",
    title: "Save image link and caption",
    contexts: ["image"],
    documentUrlPatterns: [
      "*://*.facebook.com/*",
      "*://*.pinterest.com/*",
      "*://*.instagram.com/*",
      "*://*.threads.net/*",
      "*://*.reddit.com/*"
    ]
  });

  categories.forEach(category => {
    chrome.contextMenus.create({
      id: `save_${category}`,
      parentId: "saveSocialImage",
      title: category,
      contexts: ["image"],
      documentUrlPatterns: [
        "*://*.facebook.com/*",
        "*://*.pinterest.com/*",
        "*://*.instagram.com/*",
        "*://*.threads.net/*",
        "*://*.reddit.com/*"
      ]
    });
  });
}

function addCategory(newCategory) {
  if (!categories.includes(newCategory)) {
    categories.push(newCategory);
    chrome.contextMenus.create({
      id: `save_${newCategory}`,
      parentId: "saveSocialImage",
      title: newCategory,
      contexts: ["image"],
      documentUrlPatterns: [
        "*://*.facebook.com/*",
        "*://*.pinterest.com/*",
        "*://*.instagram.com/*",
        "*://*.threads.net/*",
        "*://*.reddit.com/*"
      ]
    });
    chrome.storage.local.set({ categories: categories });
  }
}

chrome.contextMenus.onClicked.addListener((info, tab) => {
  if (info.menuItemId.startsWith("save_")) {
    const category = info.menuItemId.split("_")[1];
    const imageUrl = info.srcUrl;
    // Clean the caption when saving
    const caption = selectedText.replace(/[\n\r]+/g, ' ').trim();
    
    chrome.storage.local.get("savedItems", (result) => {
      const savedItems = result.savedItems || {};
      if (!savedItems[category]) savedItems[category] = [];
      savedItems[category].push({ imageUrl, caption });
      chrome.storage.local.set({ savedItems }, () => {
        updateBadgeText(savedItems);
        chrome.tabs.sendMessage(tab.id, { action: "showSavedMessage", count: getTotalCount(savedItems), category });
      });
    });
  }
});

function updateBadgeText(savedItems) {
  const totalCount = getTotalCount(savedItems);
  chrome.action.setBadgeText({ text: totalCount.toString() });
}

function getTotalCount(savedItems) {
  return Object.values(savedItems).reduce((sum, list) => sum + list.length, 0);
}

chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "updateSelectedText") {
    selectedText = request.text;
  } else if (request.action === "addCategory") {
    addCategory(request.category);
  } else if (request.action === "removeCategory") {
    removeCategory(request.category);
  }
});

function removeCategory(category) {
  chrome.contextMenus.remove(`save_${category}`);
  categories = categories.filter(cat => cat !== category);
}

chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "updateSelectedText") {
    selectedText = request.text;
  } else if (request.action === "addCategory") {
    addCategory(request.category);
  } else if (request.action === "removeCategory") {
    removeCategory(request.category);
  }
});

function removeCategory(category) {
  chrome.contextMenus.remove(`save_${category}`);
  categories = categories.filter(cat => cat !== category);
}

chrome.contextMenus.onClicked.addListener((info, tab) => {
  if (info.menuItemId.startsWith("save_")) {
    const category = info.menuItemId.split("_")[1];
    const imageUrl = info.srcUrl;
    const caption = selectedText.trim();
    
    chrome.storage.local.get("savedItems", (result) => {
      const savedItems = result.savedItems || {};
      if (!savedItems[category]) savedItems[category] = [];
      savedItems[category].push({ imageUrl, caption });
      chrome.storage.local.set({ savedItems }, () => {
        updateBadgeText(savedItems);
        chrome.tabs.sendMessage(tab.id, { action: "showSavedMessage", count: getTotalCount(savedItems), category });
      });
    });
  }
});
---
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "showSavedMessage") {
    showTemporaryMessage(`Item saved in ${request.category}! Total items: ${request.count}`);
  }
});

function showTemporaryMessage(message) {
  const messageElement = document.createElement('div');
  messageElement.textContent = message;
  messageElement.style.cssText = `
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #4CAF50;
    color: white;
    padding: 15px;
    border-radius: 5px;
    z-index: 10000;
  `;
  
  document.body.appendChild(messageElement);
  
  setTimeout(() => {
    messageElement.remove();
  }, 1000);
}

// Generic selection change listener
document.addEventListener("selectionchange", () => {
  const selectedText = window.getSelection().toString().trim();
  if (selectedText) {
    chrome.runtime.sendMessage({ action: "updateSelectedText", text: selectedText });
  }
});

// Platform-specific caption detection
function initializePlatformSpecificDetection() {
  const hostname = window.location.hostname;
  
  const observer = new MutationObserver(() => {
    let caption = '';

    if (hostname.includes('pinterest.com')) {
      const pinDescription = document.querySelector('[data-test-id="pin-description"]');
      if (pinDescription) {
        caption = pinDescription.textContent.trim();
      }
    }
    else if (hostname.includes('instagram.com')) {
      const postCaption = document.querySelector('h1[class*="x1lliihq"]');
      if (postCaption) {
        caption = postCaption.textContent.trim();
      }
    }
    else if (hostname.includes('threads.net')) {
      const threadText = document.querySelector('div[class*="x1lliihq"]');
      if (threadText) {
        caption = threadText.textContent.trim();
      }
    }
    else if (hostname.includes('reddit.com')) {
      const postTitle = document.querySelector('h1[data-test-id="post-title"]');
      const postText = document.querySelector('div[data-test-id="post-content"]');
      if (postTitle) {
        caption = postTitle.textContent.trim();
        if (postText) {
          caption += ' - ' + postText.textContent.trim();
        }
      }
    }

    if (caption) {
      chrome.runtime.sendMessage({ action: "updateSelectedText", text: caption });
    }
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
    characterData: true
  });
}

// Initialize platform-specific detection
initializePlatformSpecificDetection();

// Additional helper function to get the most relevant caption based on clicked element
function getNearestCaption(element) {
  const hostname = window.location.hostname;
  let caption = '';

  if (hostname.includes('instagram.com')) {
    const article = element.closest('article');
    if (article) {
      const captionEl = article.querySelector('h1[class*="x1lliihq"]');
      if (captionEl) caption = captionEl.textContent.trim();
    }
  }
  else if (hostname.includes('threads.net')) {
    const thread = element.closest('article');
    if (thread) {
      const textEl = thread.querySelector('div[class*="x1lliihq"]');
      if (textEl) caption = textEl.textContent.trim();
    }
  }
  else if (hostname.includes('reddit.com')) {
    const post = element.closest('article');
    if (post) {
      const titleEl = post.querySelector('h1[data-test-id="post-title"]');
      const textEl = post.querySelector('div[data-test-id="post-content"]');
      if (titleEl) {
        caption = titleEl.textContent.trim();
        if (textEl) caption += ' - ' + textEl.textContent.trim();
      }
    }
  }

  return caption;
}

// Add click listener for better caption detection
document.addEventListener('mousedown', (e) => {
  if (e.button === 2) { // Right click
    const nearestCaption = getNearestCaption(e.target);
    if (nearestCaption) {
      chrome.runtime.sendMessage({ action: "updateSelectedText", text: nearestCaption });
    }
  }
});
---
{
  "manifest_version": 3,
  "name": "Social Media Image and Caption Saver",
  "version": "1.0",
  "description": "Save image links and captions from Facebook, Pinterest, Instagram, Threads, and Reddit",
  "permissions": ["contextMenus", "storage"],
  "background": {
    "service_worker": "background.js"
  },
  "content_scripts": [
    {
      "matches": [
        "*://*.facebook.com/*",
        "*://*.pinterest.com/*",
        "*://*.instagram.com/*",
        "*://*.threads.net/*",
        "*://*.reddit.com/*"
      ],
      "js": ["content.js"]
    }
  ],
  "action": {
    "default_popup": "popup.html"
  }
}
---
<!DOCTYPE html>
<html>
<head>
  <title>Facebook Image Link and Caption Saver</title>
  <style>
    body { width: 300px; padding: 10px; }
    button { margin: 5px 0; }
  </style>
</head>
<body>
  <h2>Saved Items</h2>
  <div id="categoryList"></div>
  <hr>
  <p>Total saved items: <span id="totalCount">0</span></p>
  <button id="exportAllBtn">Export All</button>
  <hr>
  <h3>Add New Category</h3>
  <input type="text" id="newCategory" placeholder="Enter new category">
  <button id="addCategoryBtn">Add Category</button>
  <script src="popup.js"></script>
</body>
</html>
---
document.addEventListener('DOMContentLoaded', function() {
  updateCounts();
  document.getElementById('exportAllBtn').addEventListener('click', () => exportAll());
  document.getElementById('addCategoryBtn').addEventListener('click', addNewCategory);
});

function updateCounts() {
  chrome.storage.local.get(["savedItems", "categories"], (result) => {
    const savedItems = result.savedItems || {};
    const categories = result.categories || [];
    let totalCount = 0;
    const categoryList = document.getElementById('categoryList');
    categoryList.innerHTML = '';

    categories.forEach(category => {
      const count = savedItems[category] ? savedItems[category].length : 0;
      totalCount += count;
      
      const categoryDiv = document.createElement('div');
      categoryDiv.innerHTML = `
        <p>${category}: <span id="${category}Count">${count}</span></p>
        <button id="export_${category}">Export ${category}</button>
        <button id="remove_${category}">Remove ${category}</button>
      `;
      categoryList.appendChild(categoryDiv);

      document.getElementById(`export_${category}`).addEventListener('click', () => exportAll(category));
      document.getElementById(`remove_${category}`).addEventListener('click', () => removeCategory(category));
    });

    document.getElementById('totalCount').textContent = totalCount;
  });
}

function exportAll(category) {
  chrome.storage.local.get("savedItems", (result) => {
    const savedItems = result.savedItems || {};
    const items = category ? savedItems[category] : Object.values(savedItems).flat();

    if (items.length === 0) {
      alert("No items to export.");
      return;
    }

    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Image URL,Caption\n";
    items.forEach(item => {
      // Remove line breaks and commas from the caption
      const cleanedCaption = item.caption 
        ? item.caption.replace(/[\n\r]+/g, ' ').replace(/,/g, ' ')
        : "";
      csvContent += `${item.imageUrl},${cleanedCaption}\n`;
    });
    
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", `${category || 'all'}_items.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    if (category) {
      // Remove exported items from storage
      delete savedItems[category];
      chrome.storage.local.set({ savedItems }, () => {
        updateCounts();
        chrome.action.setBadgeText({ text: getTotalCount(savedItems).toString() });
      });
    }
  });
}

function addNewCategory() {
  const newCategory = document.getElementById('newCategory').value.trim();
  if (newCategory) {
    chrome.runtime.sendMessage({ action: "addCategory", category: newCategory }, () => {
      document.getElementById('newCategory').value = '';
      updateCounts();
    });
  }
}

function removeCategory(category) {
  if (confirm(`Are you sure you want to remove the category "${category}" and all its saved items?`)) {
    chrome.storage.local.get(["savedItems", "categories"], (result) => {
      let savedItems = result.savedItems || {};
      let categories = result.categories || [];

      // Remove the category from savedItems
      delete savedItems[category];

      // Remove the category from the categories list
      categories = categories.filter(cat => cat !== category);

      // Update storage
      chrome.storage.local.set({ savedItems, categories }, () => {
        // Send message to background script to remove context menu item
        chrome.runtime.sendMessage({ action: "removeCategory", category: category }, () => {
          updateCounts();
          chrome.action.setBadgeText({ text: getTotalCount(savedItems).toString() });
        });
      });
    });
  }
}

function getTotalCount(savedItems) {
  return Object.values(savedItems).reduce((sum, list) => sum + list.length, 0);
}